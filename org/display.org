#+begin_src python :noweb no-export :tangle ../src/cont_frac_io.py
  <<IO_IMPORTS>>
  <<TAB_UTILS>>
  <<TABS>>
  <<TABS3D>>
  <<MISC>>  
  <<LATEX_UTILS>>
#+end_src

* Tabulated display utilities
=Chart= is a class for constructing and exporting tabulated displays. It can be used for 2D (i.e., operations involving one continued fraction) or 3D (operations involving two continued fractions) displays. For 2D displayed, the homographic matrices are converted into bihomographic tensors.
#+begin_src python :tangle no :noweb-ref TAB_UTILS
  # Utilities for tabulated displays

  class Chart(object):
      """Construction and export tabulated displays"""
      def __init__(self, m: np.ndarray = tForAddition):
          if len(m.shape) == 2:
              # if initialized with a matrix intead of a tensor
              self.include_b = False
              self.mode2D = True
              self.current_tensor = Chart.m2t(m)
              self.boards = self.current_tensor.tolist()
          else:
              self.boards = m.tolist()
              self.include_b = True
              self.mode2D = False
              self.current_tensor = m.copy()

          self.output = [None]
          self.a = []
          self.b = [[]]
          self.include_a = True
          self.include_out = True

      @staticmethod
      def m2t(m: np.ndarray) -> np.ndarray:
          """Convert a homographic matrix into a bihomographic tensor"""
          return np.array([[[m[0,0], m[0,1]], [0, 0]], [[m[1,0], m[1,1]], [0, 0]]])

      def move_left(self, t: np.ndarray, a: int):
          """t is the matrix or tensor after a new term of a"""
          if len(t.shape)==2 and self.mode2D:
              t2 = Chart.m2t(t)
          else:
              t2 = t

          assert tensor_ref(t2, 'y') == tensor_ref(self.current_tensor, 'xy')
          assert tensor_ref(t2, '1') == tensor_ref(self.current_tensor, 'x')
          self.current_tensor = t2

          # add a new column for all boards
          for i in range(len(self.boards)):
              for j in range(len(self.boards[0])):
                  self.boards[i][j] = [None] + self.boards[i][j]

          self.boards[-2][-2][0] = tensor_ref(t2, 'b')
          self.boards[-2][-1][0] = tensor_ref(t2, 'a')
          self.boards[-1][-2][0] = tensor_ref(t2, 'f')
          self.boards[-1][-1][0] = tensor_ref(t2, 'e')
          self.a = [a] + self.a

      def move_down(self, t: np.ndarray, b: int):
          """t is the matrix or tensor after a new term of b"""
          assert tensor_ref(t, 'x') == tensor_ref(self.current_tensor, 'xy')
          assert tensor_ref(t, '1') == tensor_ref(self.current_tensor, 'y')
          self.current_tensor = t
          new_row_numerator   = [None] * len(self.boards[0][0])
          new_row_denominator = [None] * len(self.boards[1][0])
          new_row_numerator[0] = tensor_ref(t, 'a')
          new_row_numerator[1] = tensor_ref(t, 'c')
          new_row_denominator[0] = tensor_ref(t, 'e')
          new_row_denominator[1] = tensor_ref(t, 'g')
          self.boards[-2] = self.boards[-2] + [new_row_numerator]
          self.boards[-1] = self.boards[-1] + [new_row_denominator]
          self.b[-1] = self.b[-1] + [b]

          # all boards under have to be expanded
          for i in range(0, len(self.boards)-2):
              self.boards[i] = self.boards[i] + [[None] * len(new_row_numerator)]

      def move_under(self, t: np.ndarray, output: int):
          """t is the matrix or tensor after a Euclidean step. output is the quotient"""
          if len(t.shape)==2 and self.mode2D:
              t2 = Chart.m2t(t)
          else:
              t2 = t

          assert tensor_ref(self.current_tensor, 'f') == tensor_ref(t2, 'b')
          assert tensor_ref(self.current_tensor, 'h') == tensor_ref(t2, 'd')
          assert tensor_ref(self.current_tensor, 'e') == tensor_ref(t2, 'a')
          assert tensor_ref(self.current_tensor, 'g') == tensor_ref(t2, 'c')
          self.current_tensor = t2

          n_rows = len(self.boards[0])
          n_cols = len(self.boards[0][0])
          def new_row():
              return [None] * n_cols
          new_boards = [new_row() for i in range(n_rows)]

          new_boards[-2][0] = tensor_ref(t2, 'f')
          new_boards[-2][1] = tensor_ref(t2, 'h')
          new_boards[-1][0] = tensor_ref(t2, 'e')
          new_boards[-1][1] = tensor_ref(t2, 'g')
          self.boards = self.boards + [new_boards]

          new_b = [None] * len(self.b[-1])
          self.b = self.b + [new_b]

          self.output = self.output + [output]

      def board_to_array(self, board: list, b: list, out: int) -> list:
          new_content = []
          for i, row in enumerate(board):
              skip = False
              if self.mode2D and i%2==1:
                  skip = True

              if not skip:
                  new_row = row.copy()

                  if self.include_b:
                      if i == 0:
                          new_row = new_row + [None]
                      elif b is None:
                          new_row = new_row + [None]
                      elif i <= len(b):
                          new_row = new_row + [b[i-1]]
                      else:
                          new_row = new_row + [None]

                  if self.include_out:
                      if i == len(board) - 2:
                          new_row = new_row + [out]
                      else:
                          new_row = new_row + [None]

                  new_content = new_content + [new_row]
          return new_content

      def to_array(self) -> list:
          content = []
          row = []
          n_rows = len(self.boards[0])
          n_cols = len(self.boards[0][0])

          if self.include_a:
              row = row + [None]
              if self.include_b:
                  row = row + [None]
              if self.include_out:
                  row = row + [None]
              row = self.a + row
              row = [None] * (n_cols - len(self.a) - 1) + row
              content = content + [row]

          for i in range(len(self.boards)):
              board = self.boards[i]
              b = self.b[i] if i<len(self.b) else None
              out = self.output[i] if i<len(self.output) else None
              content = content + self.board_to_array(board, b, out)

          return content

      @staticmethod
      def pp_item(item: int, field_width: int) -> str:
          if item is None:
              return " " * field_width
          else:
              return f"{item : > {field_width}}"

      @staticmethod
      def pp_row(row: list, field_width: int) -> str:
          return reduce(lambda s, item: s + Chart.pp_item(item, field_width), row, "") + "\n"

      def __repr__(self) -> str:
          content = self.to_array()

          content_nonone = [[c for c in row if c is not None] for row in content]
          content_nonone = [r for r in content_nonone if r != []]
          mx = max(map(max, content_nonone))
          field_width = len(str(mx)) + 1

          s = reduce(lambda s, r: s + Chart.pp_row(r, field_width), content, "")
          return s

      def export_csv(self, filename: str):
          content = self.to_array()
          with open(filename, mode = 'w') as outfile:
              writer = csv.writer(outfile)
              writer.writerows(content)
#+end_src

* Tabulated displays: 2D
#+begin_src python :tangle no :noweb-ref TABS
  # Tabulated displays: 2D

  def r2cf_tab(rn: Rational) -> str:
      """Show the prpocess of converting a rational numner to a continued fraction"""
      def row(st: str, x: tuple):
          b, q = x
          return st + f"{b : > 5}  {q : < 5}\n"
      str0 = f"{rn.a : > 5}\n"
      return reduce(row, r2cf_(rn), str0) + f"{0 : > 5}\n"
#+end_src

#+begin_src python :tangle no :noweb-ref TABS
  def cf_convergents1_tab(cf: Iterator[int]) -> Chart:
      """Show the process of converting a continued fraction to a rational number"""
      chart = Chart(m = np.identity(2, int))
      chart.include_out = False
      (cf1, cf2) = tee(cf)
      for (mat, a) in zip(cf_convergents1_(cf1), cf2):
          chart.move_left(mat, a)
      return chart
#+end_src

#+begin_src python :tangle no :noweb-ref TABS
  def euclid_matrix_tab(m: np.ndarray) -> Chart:
      """Show the matrix form of the Euclidean algorithm"""
      chart = Chart(m = m)
      for (q, r) in euclid_matrix_(m):
          chart.move_under(r, q)
      return chart
#+end_src

#+begin_src python :tangle no :noweb-ref TABS
  def cf_transform_tab(cf: Iterator[int], m0 = np.identity(2, int)) -> Chart:
      """Show the process of operating on a continued fraction.
      Make sure that cf has finite number of terms
      """
      chart = Chart(m = m0)
      res = cf_transform_(cf, m0)

      for (q, r, m, a, new_a) in res:
          if new_a:
              chart.move_left(m, a)
          if q is None:
              # this means that no euclid step was performed
              # do nothing
              pass
          else:
              if r is not None:
                  chart.move_under(r, q)
              else:
                  # r is None, meaning that the quotients are for rational numbers rathen than matrices
                  chart.output = chart.output + [q]
      return chart
#+end_src

* Tabulated displays: 3D
#+begin_src python :tangle no :noweb-ref TABS3D
  # Tabulated displays: 3D

  def arithmetic_convergents_tab(a: Iterator[int], b: Iterator[int], t0: np.ndarray = tForAddition) -> Chart:
      """Show the process of calculating convergents of arithmetical operations"""
      c = Chart(t0)
      for direction, coefficient, t in arithmetic_convergents_(a, b, t0):
          if direction == 'a':
              c.move_left(t, coefficient)
          else:
              c.move_down(t, coefficient)
      return c
#+end_src

* Pretty printing utilities
#+begin_src python :tangle no :noweb-ref MISC
  # Pretty printing utilities

  def pp_qr(qr: Tuple[int, np.ndarray]) -> None:
      """Pretty print a tuple of a quotient and a remainder matrix"""
      q, r = qr
      print(f"{q:>2} {r[0][0]:2} {r[0][1]:2}")
      print(f"   {r[1][0]:2} {r[1][1]:2}")
#+end_src

#+begin_src python :tangle no :noweb-ref MISC
  def pp_inf_cf(cf: list) -> str:
      """Pretty print a list representing the first couple terms of a longer continued fraction"""
      res = "["
      res = res + reduce(lambda s, n: s + str(n) + ",", cf, "")
      res = res[:-1] + "...]"
      return res
#+end_src

* LaTeX utilities
#+begin_src python :tangle no :noweb-ref LATEX_UTILS
  # Utilities functions for LaTeX displays
  
  def latex_cf(lst: list) -> str:
      if len(lst) == 1:
          return str(lst[0])
      else:
          x = str(lst[0]) + "+"
          x = x + r"\frac{1}{" + latex_cf(lst[1:]) + "}"
          return x

  def latex_rational(r: Rational) -> str:
      return r"\frac{" + str(r.a) + "}{" + str(r.b) + "}"

  def show_cf_expansion(r: Rational) -> str:
      print(r"\[")
      print(r"\frac{", r.a, "}{", r.b, "}=")
      nc = list(r2cf(r))
      print(latex_cf(nc))
      print(r"\]")

  def show_rational_series(itr: Iterator[int]) -> str:
      rLst = list(cf_convergents0(itr))
      s = ""
      for r in rLst:
          s = s + "$" + latex_rational(r) + "$" + ","

      print(s[:-1])
#+end_src
* Imports
#+begin_src python :tangle no :noweb-ref IO_IMPORTS
  from cont_frac import *
  from functools import reduce
  import csv
#+end_src
